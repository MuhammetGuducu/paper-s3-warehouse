services:
  db:
    image: postgres:18
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  web:
    build: .
    container_name: lager_digital
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    ports:
      - 8000:8000
    volumes:
      - ./src:/app
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
    command: >
      sh -c "until nc -z $$POSTGRES_HOST $$POSTGRES_PORT; do echo 'Waiting for database...'; sleep 1; done; python app/manage.py migrate --noinput && python app/manage.py runserver 0.0.0.0:8000"

volumes:
  postgres_data:
